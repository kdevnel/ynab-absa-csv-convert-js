/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={1066:function(e,t,r){e.exports=function(e,t,r,n){"use strict";return e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n,t=t&&t.hasOwnProperty("default")?t.default:t,r=r&&r.hasOwnProperty("default")?r.default:r,function(t,i){return new Promise((function(o,s){if(!i||i&&!i.headers)return o({inValidMessages:["config headers are required"],data:[]});e.parse(t,{skipEmptyLines:!0,complete:function(e){o(function(e,t){const i={inValidMessages:[],data:[]};return e.forEach((function(e,n){const o={};0!==n&&e.length>t.headers.length&&i.inValidMessages.push("Too many fields: expected "+t.headers.length+" fields but parsed "+e.length+". In the row "+n),e.forEach((function(e,s){const a=t.headers[s];if(a){if(0===n){if(t.isHeaderNameOptional&&a.name===e)return;if(!t.isHeaderNameOptional)return void(a.name!==e&&i.inValidMessages.push(r(a.headerError)?a.headerError(e,a.name,n+1,s+1):"Header name "+e+" is not correct or missing in the "+(n+1)+" row / "+(s+1)+" column. The Header name should be "+a.name))}a.required&&!e.length?i.inValidMessages.push(r(a.requiredError)?a.requiredError(a.name,n+1,s+1):String(a.name+" is required in the "+(n+1)+" row / "+(s+1)+" column")):a.validate&&!a.validate(e)&&i.inValidMessages.push(r(a.validateError)?a.validateError(a.name,n+1,s+1):String(a.name+" is not valid in the "+(n+1)+" row / "+(s+1)+" column")),a.optional&&(o[a.inputName]=e),a.isArray?o[a.inputName]=e.split(",").map((function(e){return e.trim()})):o[a.inputName]=e}})),Object.keys(o).length&&i.data.push(o)})),function(e,t){e.data.length&&t.headers.filter((function(e){return e.unique})).forEach((function(t){if(!n(e.data,t.inputName)){const n=[];e.data.forEach(((i,o)=>{var s=i[t.inputName];n.indexOf(s)>=0?e.inValidMessages.push(r(t.uniqueError)?t.uniqueError(t.name,o+2):String(t.name+" is not unique at the "+(o+2)+"row")):n.push(s)}))}}))}(i,t),i}(e.data,i))},error:function(e,t){s({error:e,file:t})}})}))}}(r(7460),r(5578),r(3560),r(1280))},1280:(e,t,r)=>{var n=r(5578);e.exports=function(e,t){return n(e,t).length===e.length}},8552:(e,t,r)=>{var n=r(852)(r(5639),"DataView");e.exports=n},1989:(e,t,r)=>{var n=r(1789),i=r(401),o=r(7667),s=r(1327),a=r(1866);function u(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=s,u.prototype.set=a,e.exports=u},8407:(e,t,r)=>{var n=r(7040),i=r(4125),o=r(2117),s=r(7518),a=r(4705);function u(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=s,u.prototype.set=a,e.exports=u},7071:(e,t,r)=>{var n=r(852)(r(5639),"Map");e.exports=n},3369:(e,t,r)=>{var n=r(4785),i=r(1285),o=r(6e3),s=r(9916),a=r(5265);function u(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=s,u.prototype.set=a,e.exports=u},3818:(e,t,r)=>{var n=r(852)(r(5639),"Promise");e.exports=n},8525:(e,t,r)=>{var n=r(852)(r(5639),"Set");e.exports=n},8668:(e,t,r)=>{var n=r(3369),i=r(619),o=r(2385);function s(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}s.prototype.add=s.prototype.push=i,s.prototype.has=o,e.exports=s},6384:(e,t,r)=>{var n=r(8407),i=r(7465),o=r(3779),s=r(7599),a=r(4758),u=r(4309);function c(e){var t=this.__data__=new n(e);this.size=t.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=s,c.prototype.has=a,c.prototype.set=u,e.exports=c},2705:(e,t,r)=>{var n=r(5639).Symbol;e.exports=n},1149:(e,t,r)=>{var n=r(5639).Uint8Array;e.exports=n},577:(e,t,r)=>{var n=r(852)(r(5639),"WeakMap");e.exports=n},4963:e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,i=0,o=[];++r<n;){var s=e[r];t(s,r,e)&&(o[i++]=s)}return o}},7443:(e,t,r)=>{var n=r(2118);e.exports=function(e,t){return!(null==e||!e.length)&&n(e,t,0)>-1}},1196:e=>{e.exports=function(e,t,r){for(var n=-1,i=null==e?0:e.length;++n<i;)if(r(t,e[n]))return!0;return!1}},4636:(e,t,r)=>{var n=r(2545),i=r(5694),o=r(1469),s=r(4144),a=r(5776),u=r(6719),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=o(e),f=!r&&i(e),l=!r&&!f&&s(e),h=!r&&!f&&!l&&u(e),p=r||f||l||h,d=p?n(e.length,String):[],v=d.length;for(var g in e)!t&&!c.call(e,g)||p&&("length"==g||l&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,v))||d.push(g);return d}},9932:e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}},2488:e=>{e.exports=function(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e}},2908:e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},8470:(e,t,r)=>{var n=r(7813);e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},1848:e=>{e.exports=function(e,t,r,n){for(var i=e.length,o=r+(n?1:-1);n?o--:++o<i;)if(t(e[o],o,e))return o;return-1}},7786:(e,t,r)=>{var n=r(1811),i=r(327);e.exports=function(e,t){for(var r=0,o=(t=n(t,e)).length;null!=e&&r<o;)e=e[i(t[r++])];return r&&r==o?e:void 0}},8866:(e,t,r)=>{var n=r(2488),i=r(1469);e.exports=function(e,t,r){var o=t(e);return i(e)?o:n(o,r(e))}},4239:(e,t,r)=>{var n=r(2705),i=r(9607),o=r(2333),s=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":s&&s in Object(e)?i(e):o(e)}},13:e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},2118:(e,t,r)=>{var n=r(1848),i=r(2722),o=r(2351);e.exports=function(e,t,r){return t==t?o(e,t,r):n(e,i,r)}},9454:(e,t,r)=>{var n=r(4239),i=r(7005);e.exports=function(e){return i(e)&&"[object Arguments]"==n(e)}},939:(e,t,r)=>{var n=r(2492),i=r(7005);e.exports=function e(t,r,o,s,a){return t===r||(null==t||null==r||!i(t)&&!i(r)?t!=t&&r!=r:n(t,r,o,s,e,a))}},2492:(e,t,r)=>{var n=r(6384),i=r(7114),o=r(8351),s=r(6096),a=r(4160),u=r(1469),c=r(4144),f=r(6719),l="[object Arguments]",h="[object Array]",p="[object Object]",d=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,v,g,_){var m=u(e),y=u(t),b=m?h:a(e),x=y?h:a(t),w=(b=b==l?p:b)==p,O=(x=x==l?p:x)==p,E=b==x;if(E&&c(e)){if(!c(t))return!1;m=!0,w=!1}if(E&&!w)return _||(_=new n),m||f(e)?i(e,t,r,v,g,_):o(e,t,b,r,v,g,_);if(!(1&r)){var k=w&&d.call(e,"__wrapped__"),j=O&&d.call(t,"__wrapped__");if(k||j){var S=k?e.value():e,C=j?t.value():t;return _||(_=new n),g(S,C,r,v,_)}}return!!E&&(_||(_=new n),s(e,t,r,v,g,_))}},2958:(e,t,r)=>{var n=r(6384),i=r(939);e.exports=function(e,t,r,o){var s=r.length,a=s,u=!o;if(null==e)return!a;for(e=Object(e);s--;){var c=r[s];if(u&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++s<a;){var f=(c=r[s])[0],l=e[f],h=c[1];if(u&&c[2]){if(void 0===l&&!(f in e))return!1}else{var p=new n;if(o)var d=o(l,h,f,e,t,p);if(!(void 0===d?i(h,l,3,o,p):d))return!1}}return!0}},2722:e=>{e.exports=function(e){return e!=e}},8458:(e,t,r)=>{var n=r(3560),i=r(5346),o=r(3218),s=r(346),a=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,f=u.toString,l=c.hasOwnProperty,h=RegExp("^"+f.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(n(e)?h:a).test(s(e))}},8749:(e,t,r)=>{var n=r(4239),i=r(1780),o=r(7005),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&i(e.length)&&!!s[n(e)]}},7206:(e,t,r)=>{var n=r(1573),i=r(6432),o=r(6557),s=r(1469),a=r(9601);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?s(e)?i(e[0],e[1]):n(e):a(e)}},280:(e,t,r)=>{var n=r(5726),i=r(6916),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return i(e);var t=[];for(var r in Object(e))o.call(e,r)&&"constructor"!=r&&t.push(r);return t}},1573:(e,t,r)=>{var n=r(2958),i=r(1499),o=r(2634);e.exports=function(e){var t=i(e);return 1==t.length&&t[0][2]?o(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},6432:(e,t,r)=>{var n=r(939),i=r(7361),o=r(9095),s=r(5403),a=r(9162),u=r(2634),c=r(327);e.exports=function(e,t){return s(e)&&a(t)?u(c(e),t):function(r){var s=i(r,e);return void 0===s&&s===t?o(r,e):n(t,s,3)}}},371:e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},9152:(e,t,r)=>{var n=r(7786);e.exports=function(e){return function(t){return n(t,e)}}},2545:e=>{e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},531:(e,t,r)=>{var n=r(2705),i=r(9932),o=r(1469),s=r(3448),a=n?n.prototype:void 0,u=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return i(t,e)+"";if(s(t))return u?u.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},5652:(e,t,r)=>{var n=r(8668),i=r(7443),o=r(1196),s=r(4757),a=r(3593),u=r(1814);e.exports=function(e,t,r){var c=-1,f=i,l=e.length,h=!0,p=[],d=p;if(r)h=!1,f=o;else if(l>=200){var v=t?null:a(e);if(v)return u(v);h=!1,f=s,d=new n}else d=t?[]:p;e:for(;++c<l;){var g=e[c],_=t?t(g):g;if(g=r||0!==g?g:0,h&&_==_){for(var m=d.length;m--;)if(d[m]===_)continue e;t&&d.push(_),p.push(g)}else f(d,_,r)||(d!==p&&d.push(_),p.push(g))}return p}},4757:e=>{e.exports=function(e,t){return e.has(t)}},1811:(e,t,r)=>{var n=r(1469),i=r(5403),o=r(5514),s=r(9833);e.exports=function(e,t){return n(e)?e:i(e,t)?[e]:o(s(e))}},4429:(e,t,r)=>{var n=r(5639)["__core-js_shared__"];e.exports=n},3593:(e,t,r)=>{var n=r(8525),i=r(308),o=r(1814),s=n&&1/o(new n([,-0]))[1]==1/0?function(e){return new n(e)}:i;e.exports=s},7114:(e,t,r)=>{var n=r(8668),i=r(2908),o=r(4757);e.exports=function(e,t,r,s,a,u){var c=1&r,f=e.length,l=t.length;if(f!=l&&!(c&&l>f))return!1;var h=u.get(e),p=u.get(t);if(h&&p)return h==t&&p==e;var d=-1,v=!0,g=2&r?new n:void 0;for(u.set(e,t),u.set(t,e);++d<f;){var _=e[d],m=t[d];if(s)var y=c?s(m,_,d,t,e,u):s(_,m,d,e,t,u);if(void 0!==y){if(y)continue;v=!1;break}if(g){if(!i(t,(function(e,t){if(!o(g,t)&&(_===e||a(_,e,r,s,u)))return g.push(t)}))){v=!1;break}}else if(_!==m&&!a(_,m,r,s,u)){v=!1;break}}return u.delete(e),u.delete(t),v}},8351:(e,t,r)=>{var n=r(2705),i=r(1149),o=r(7813),s=r(7114),a=r(8776),u=r(1814),c=n?n.prototype:void 0,f=c?c.valueOf:void 0;e.exports=function(e,t,r,n,c,l,h){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!l(new i(e),new i(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var d=1&n;if(p||(p=u),e.size!=t.size&&!d)return!1;var v=h.get(e);if(v)return v==t;n|=2,h.set(e,t);var g=s(p(e),p(t),n,c,l,h);return h.delete(e),g;case"[object Symbol]":if(f)return f.call(e)==f.call(t)}return!1}},6096:(e,t,r)=>{var n=r(8234),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,o,s,a){var u=1&r,c=n(e),f=c.length;if(f!=n(t).length&&!u)return!1;for(var l=f;l--;){var h=c[l];if(!(u?h in t:i.call(t,h)))return!1}var p=a.get(e),d=a.get(t);if(p&&d)return p==t&&d==e;var v=!0;a.set(e,t),a.set(t,e);for(var g=u;++l<f;){var _=e[h=c[l]],m=t[h];if(o)var y=u?o(m,_,h,t,e,a):o(_,m,h,e,t,a);if(!(void 0===y?_===m||s(_,m,r,o,a):y)){v=!1;break}g||(g="constructor"==h)}if(v&&!g){var b=e.constructor,x=t.constructor;b==x||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(v=!1)}return a.delete(e),a.delete(t),v}},1957:(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},8234:(e,t,r)=>{var n=r(8866),i=r(9551),o=r(3674);e.exports=function(e){return n(e,o,i)}},5050:(e,t,r)=>{var n=r(7019);e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},1499:(e,t,r)=>{var n=r(9162),i=r(3674);e.exports=function(e){for(var t=i(e),r=t.length;r--;){var o=t[r],s=e[o];t[r]=[o,s,n(s)]}return t}},852:(e,t,r)=>{var n=r(8458),i=r(7801);e.exports=function(e,t){var r=i(e,t);return n(r)?r:void 0}},9607:(e,t,r)=>{var n=r(2705),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=o.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var i=s.call(e);return n&&(t?e[a]=r:delete e[a]),i}},9551:(e,t,r)=>{var n=r(4963),i=r(479),o=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(e){return null==e?[]:(e=Object(e),n(s(e),(function(t){return o.call(e,t)})))}:i;e.exports=a},4160:(e,t,r)=>{var n=r(8552),i=r(7071),o=r(3818),s=r(8525),a=r(577),u=r(4239),c=r(346),f="[object Map]",l="[object Promise]",h="[object Set]",p="[object WeakMap]",d="[object DataView]",v=c(n),g=c(i),_=c(o),m=c(s),y=c(a),b=u;(n&&b(new n(new ArrayBuffer(1)))!=d||i&&b(new i)!=f||o&&b(o.resolve())!=l||s&&b(new s)!=h||a&&b(new a)!=p)&&(b=function(e){var t=u(e),r="[object Object]"==t?e.constructor:void 0,n=r?c(r):"";if(n)switch(n){case v:return d;case g:return f;case _:return l;case m:return h;case y:return p}return t}),e.exports=b},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},222:(e,t,r)=>{var n=r(1811),i=r(5694),o=r(1469),s=r(5776),a=r(1780),u=r(327);e.exports=function(e,t,r){for(var c=-1,f=(t=n(t,e)).length,l=!1;++c<f;){var h=u(t[c]);if(!(l=null!=e&&r(e,h)))break;e=e[h]}return l||++c!=f?l:!!(f=null==e?0:e.length)&&a(f)&&s(h,f)&&(o(e)||i(e))}},1789:(e,t,r)=>{var n=r(4536);e.exports=function(){this.__data__=n?n(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,r)=>{var n=r(4536),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return i.call(t,e)?t[e]:void 0}},1327:(e,t,r)=>{var n=r(4536),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:i.call(t,e)}},1866:(e,t,r)=>{var n=r(4536);e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},5403:(e,t,r)=>{var n=r(1469),i=r(3448),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!i(e))||s.test(e)||!o.test(e)||null!=t&&e in Object(t)}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,r)=>{var n,i=r(4429),o=(n=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!o&&o in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},9162:(e,t,r)=>{var n=r(3218);e.exports=function(e){return e==e&&!n(e)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,r)=>{var n=r(8470),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0||(r==t.length-1?t.pop():i.call(t,r,1),--this.size,0))}},2117:(e,t,r)=>{var n=r(8470);e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},7518:(e,t,r)=>{var n=r(8470);e.exports=function(e){return n(this.__data__,e)>-1}},4705:(e,t,r)=>{var n=r(8470);e.exports=function(e,t){var r=this.__data__,i=n(r,e);return i<0?(++this.size,r.push([e,t])):r[i][1]=t,this}},4785:(e,t,r)=>{var n=r(1989),i=r(8407),o=r(7071);e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(o||i),string:new n}}},1285:(e,t,r)=>{var n=r(5050);e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,r)=>{var n=r(5050);e.exports=function(e){return n(this,e).get(e)}},9916:(e,t,r)=>{var n=r(5050);e.exports=function(e){return n(this,e).has(e)}},5265:(e,t,r)=>{var n=r(5050);e.exports=function(e,t){var r=n(this,e),i=r.size;return r.set(e,t),this.size+=r.size==i?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}},2634:e=>{e.exports=function(e,t){return function(r){return null!=r&&r[e]===t&&(void 0!==t||e in Object(r))}}},4523:(e,t,r)=>{var n=r(8306);e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},4536:(e,t,r)=>{var n=r(852)(Object,"create");e.exports=n},6916:(e,t,r)=>{var n=r(5569)(Object.keys,Object);e.exports=n},1167:(e,t,r)=>{e=r.nmd(e);var n=r(1957),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,s=o&&o.exports===i&&n.process,a=function(){try{return o&&o.require&&o.require("util").types||s&&s.binding&&s.binding("util")}catch(e){}}();e.exports=a},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},5639:(e,t,r)=>{var n=r(1957),i="object"==typeof self&&self&&self.Object===Object&&self,o=n||i||Function("return this")();e.exports=o},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},7465:(e,t,r)=>{var n=r(8407);e.exports=function(){this.__data__=new n,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,r)=>{var n=r(8407),i=r(7071),o=r(3369);e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var s=r.__data__;if(!i||s.length<199)return s.push([e,t]),this.size=++r.size,this;r=this.__data__=new o(s)}return r.set(e,t),this.size=r.size,this}},2351:e=>{e.exports=function(e,t,r){for(var n=r-1,i=e.length;++n<i;)if(e[n]===t)return n;return-1}},5514:(e,t,r)=>{var n=r(4523),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(i,(function(e,r,n,i){t.push(n?i.replace(o,"$1"):r||e)})),t}));e.exports=s},327:(e,t,r)=>{var n=r(3448);e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},7361:(e,t,r)=>{var n=r(7786);e.exports=function(e,t,r){var i=null==e?void 0:n(e,t);return void 0===i?r:i}},9095:(e,t,r)=>{var n=r(13),i=r(222);e.exports=function(e,t){return null!=e&&i(e,t,n)}},6557:e=>{e.exports=function(e){return e}},5694:(e,t,r)=>{var n=r(9454),i=r(7005),o=Object.prototype,s=o.hasOwnProperty,a=o.propertyIsEnumerable,u=n(function(){return arguments}())?n:function(e){return i(e)&&s.call(e,"callee")&&!a.call(e,"callee")};e.exports=u},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,r)=>{var n=r(3560),i=r(1780);e.exports=function(e){return null!=e&&i(e.length)&&!n(e)}},4144:(e,t,r)=>{e=r.nmd(e);var n=r(5639),i=r(5062),o=t&&!t.nodeType&&t,s=o&&e&&!e.nodeType&&e,a=s&&s.exports===o?n.Buffer:void 0,u=(a?a.isBuffer:void 0)||i;e.exports=u},3560:(e,t,r)=>{var n=r(4239),i=r(3218);e.exports=function(e){if(!i(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},3448:(e,t,r)=>{var n=r(4239),i=r(7005);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==n(e)}},6719:(e,t,r)=>{var n=r(8749),i=r(1717),o=r(1167),s=o&&o.isTypedArray,a=s?i(s):n;e.exports=a},3674:(e,t,r)=>{var n=r(4636),i=r(280),o=r(8612);e.exports=function(e){return o(e)?n(e):i(e)}},8306:(e,t,r)=>{var n=r(3369);function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var s=e.apply(this,n);return r.cache=o.set(i,s)||o,s};return r.cache=new(i.Cache||n),r}i.Cache=n,e.exports=i},308:e=>{e.exports=function(){}},9601:(e,t,r)=>{var n=r(371),i=r(9152),o=r(5403),s=r(327);e.exports=function(e){return o(e)?n(s(e)):i(e)}},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},9833:(e,t,r)=>{var n=r(531);e.exports=function(e){return null==e?"":n(e)}},5578:(e,t,r)=>{var n=r(7206),i=r(5652);e.exports=function(e,t){return e&&e.length?i(e,n(t,2)):[]}},7460:function(e,t){var r,n;void 0===(n="function"==typeof(r=function e(){"use strict";var t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{},r=!t.document&&!!t.postMessage,n=r&&/blob:/i.test((t.location||{}).protocol),i={},o=0,s={parse:function(r,n){var a=(n=n||{}).dynamicTyping||!1;if(x(a)&&(n.dynamicTypingFunction=a,a={}),n.dynamicTyping=a,n.transform=!!x(n.transform)&&n.transform,n.worker&&s.WORKERS_SUPPORTED){var u=function(){if(!s.WORKERS_SUPPORTED)return!1;var r,n,a=(r=t.URL||t.webkitURL||null,n=e.toString(),s.BLOB_URL||(s.BLOB_URL=r.createObjectURL(new Blob(["(",n,")();"],{type:"text/javascript"})))),u=new t.Worker(a);return u.onmessage=g,u.id=o++,i[u.id]=u}();return u.userStep=n.step,u.userChunk=n.chunk,u.userComplete=n.complete,u.userError=n.error,n.step=x(n.step),n.chunk=x(n.chunk),n.complete=x(n.complete),n.error=x(n.error),delete n.worker,void u.postMessage({input:r,config:n,workerId:u.id})}var p=null;return s.NODE_STREAM_INPUT,"string"==typeof r?p=n.download?new c(n):new l(n):!0===r.readable&&x(r.read)&&x(r.on)?p=new h(n):(t.File&&r instanceof File||r instanceof Object)&&(p=new f(n)),p.stream(r)},unparse:function(e,t){var r=!1,n=!0,i=",",o="\r\n",a='"',u=a+a,c=!1,f=null,l=!1;!function(){if("object"==typeof t){if("string"!=typeof t.delimiter||s.BAD_DELIMITERS.filter((function(e){return-1!==t.delimiter.indexOf(e)})).length||(i=t.delimiter),("boolean"==typeof t.quotes||"function"==typeof t.quotes||Array.isArray(t.quotes))&&(r=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(c=t.skipEmptyLines),"string"==typeof t.newline&&(o=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(n=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");f=t.columns}void 0!==t.escapeChar&&(u=t.escapeChar+a),"boolean"==typeof t.escapeFormulae&&(l=t.escapeFormulae)}}();var h=new RegExp(d(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return p(null,e,c);if("object"==typeof e[0])return p(f||Object.keys(e[0]),e,c)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:"object"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),p(e.fields||[],e.data||[],c);throw new Error("Unable to serialize unrecognized input");function p(e,t,r){var s="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var a=Array.isArray(e)&&0<e.length,u=!Array.isArray(t[0]);if(a&&n){for(var c=0;c<e.length;c++)0<c&&(s+=i),s+=v(e[c],c);0<t.length&&(s+=o)}for(var f=0;f<t.length;f++){var l=a?e.length:t[f].length,h=!1,p=a?0===Object.keys(t[f]).length:0===t[f].length;if(r&&!a&&(h="greedy"===r?""===t[f].join("").trim():1===t[f].length&&0===t[f][0].length),"greedy"===r&&a){for(var d=[],g=0;g<l;g++){var _=u?e[g]:g;d.push(t[f][_])}h=""===d.join("").trim()}if(!h){for(var m=0;m<l;m++){0<m&&!p&&(s+=i);var y=a&&u?e[m]:m;s+=v(t[f][y],m)}f<t.length-1&&(!r||0<l&&!p)&&(s+=o)}}return s}function v(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);!0===l&&"string"==typeof e&&null!==e.match(/^[=+\-@].*$/)&&(e="'"+e);var n=e.toString().replace(h,u);return"boolean"==typeof r&&r||"function"==typeof r&&r(e,t)||Array.isArray(r)&&r[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(n,s.BAD_DELIMITERS)||-1<n.indexOf(i)||" "===n.charAt(0)||" "===n.charAt(n.length-1)?a+n+a:n}}};if(s.RECORD_SEP=String.fromCharCode(30),s.UNIT_SEP=String.fromCharCode(31),s.BYTE_ORDER_MARK="\ufeff",s.BAD_DELIMITERS=["\r","\n",'"',s.BYTE_ORDER_MARK],s.WORKERS_SUPPORTED=!r&&!!t.Worker,s.NODE_STREAM_INPUT=1,s.LocalChunkSize=10485760,s.RemoteChunkSize=5242880,s.DefaultDelimiter=",",s.Parser=v,s.ParserHandle=p,s.NetworkStreamer=c,s.FileStreamer=f,s.StringStreamer=l,s.ReadableStreamStreamer=h,t.jQuery){var a=t.jQuery;a.fn.parse=function(e){var r=e.config||{},n=[];return this.each((function(e){if("INPUT"!==a(this).prop("tagName").toUpperCase()||"file"!==a(this).attr("type").toLowerCase()||!t.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)n.push({file:this.files[i],inputElem:this,instanceConfig:a.extend({},r)})})),i(),this;function i(){if(0!==n.length){var t,r,i,u=n[0];if(x(e.before)){var c=e.before(u.file,u.inputElem);if("object"==typeof c){if("abort"===c.action)return"AbortError",t=u.file,r=u.inputElem,i=c.reason,void(x(e.error)&&e.error({name:"AbortError"},t,r,i));if("skip"===c.action)return void o();"object"==typeof c.config&&(u.instanceConfig=a.extend(u.instanceConfig,c.config))}else if("skip"===c)return void o()}var f=u.instanceConfig.complete;u.instanceConfig.complete=function(e){x(f)&&f(e,u.file,u.inputElem),o()},s.parse(u.file,u.instanceConfig)}else x(e.complete)&&e.complete()}function o(){n.splice(0,1),i()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=y(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new p(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,r){if(this.isFirstChunk&&x(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&&(e=i)}this.isFirstChunk=!1,this._halted=!1;var o=this._partialLine+e;this._partialLine="";var a=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var u=a.meta.cursor;this._finished||(this._partialLine=o.substring(u-this._baseIndex),this._baseIndex=u),a&&a.data&&(this._rowCount+=a.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(n)t.postMessage({results:a,workerId:s.WORKER_ID,finished:c});else if(x(this._config.chunk)&&!r){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!c||!x(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||a&&a.meta.paused||this._nextChunk(),a}this._halted=!0},this._sendError=function(e){x(this._config.error)?this._config.error(e):n&&this._config.error&&t.postMessage({workerId:s.WORKER_ID,error:e,finished:!1})}}function c(e){var t;(e=e||{}).chunkSize||(e.chunkSize=s.RemoteChunkSize),u.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=b(this._chunkLoaded,this),t.onerror=b(this._chunkError,this)),t.open(this._config.downloadRequestBody?"POST":"GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i)}try{t.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}r&&0===t.status&&this._chunkError()}},this._chunkLoaded=function(){4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:t.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader("Content-Range");return null===t?-1:parseInt(t.substring(t.lastIndexOf("/")+1))}(t),this.parseChunk(t.responseText)))},this._chunkError=function(e){var r=t.statusText||e;this._sendError(new Error(r))}}function f(e){var t,r;(e=e||{}).chunkSize||(e.chunkSize=s.LocalChunkSize),u.call(this,e);var n="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,r=e.slice||e.webkitSlice||e.mozSlice,n?((t=new FileReader).onload=b(this._chunkLoaded,this),t.onerror=b(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=r.call(e,this._start,i)}var o=t.readAsText(e,this._config.encoding);n||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function l(e){var t;u.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,r=this._config.chunkSize;return r?(e=t.substring(0,r),t=t.substring(r)):(e=t,t=""),this._finished=!t,this.parseChunk(e)}}}function h(e){u.call(this,e=e||{});var t=[],r=!0,n=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){n&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=b((function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}}),this),this._streamError=b((function(e){this._streamCleanUp(),this._sendError(e)}),this),this._streamEnd=b((function(){this._streamCleanUp(),n=!0,this._streamData("")}),this),this._streamCleanUp=b((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function p(e){var t,r,n,i=Math.pow(2,53),o=-i,a=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,u=/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/,c=this,f=0,l=0,h=!1,p=!1,g=[],_={data:[],errors:[],meta:{}};if(x(e.step)){var m=e.step;e.step=function(t){if(_=t,O())w();else{if(w(),0===_.data.length)return;f+=t.data.length,e.preview&&f>e.preview?r.abort():(_.data=_.data[0],m(_,c))}}}function b(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function w(){if(_&&n&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+s.DefaultDelimiter+"'"),n=!1),e.skipEmptyLines)for(var t=0;t<_.data.length;t++)b(_.data[t])&&_.data.splice(t--,1);return O()&&function(){if(_)if(Array.isArray(_.data[0])){for(var t=0;O()&&t<_.data.length;t++)_.data[t].forEach(r);_.data.splice(0,1)}else _.data.forEach(r);function r(t,r){x(e.transformHeader)&&(t=e.transformHeader(t,r)),g.push(t)}}(),function(){if(!_||!e.header&&!e.dynamicTyping&&!e.transform)return _;function t(t,r){var n,i=e.header?{}:[];for(n=0;n<t.length;n++){var o=n,s=t[n];e.header&&(o=n>=g.length?"__parsed_extra":g[n]),e.transform&&(s=e.transform(s,o)),s=E(o,s),"__parsed_extra"===o?(i[o]=i[o]||[],i[o].push(s)):i[o]=s}return e.header&&(n>g.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+g.length+" fields but parsed "+n,l+r):n<g.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+g.length+" fields but parsed "+n,l+r)),i}var r=1;return!_.data.length||Array.isArray(_.data[0])?(_.data=_.data.map(t),r=_.data.length):_.data=t(_.data,0),e.header&&_.meta&&(_.meta.fields=g),l+=r,_}()}function O(){return e.header&&0===g.length}function E(t,r){return n=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[n]&&(e.dynamicTyping[n]=e.dynamicTypingFunction(n)),!0===(e.dynamicTyping[n]||e.dynamicTyping)?"true"===r||"TRUE"===r||"false"!==r&&"FALSE"!==r&&(function(e){if(a.test(e)){var t=parseFloat(e);if(o<t&&t<i)return!0}return!1}(r)?parseFloat(r):u.test(r)?new Date(r):""===r?null:r):r;var n}function k(e,t,r,n){var i={type:e,code:t,message:r};void 0!==n&&(i.row=n),_.errors.push(i)}this.parse=function(i,o,a){var u=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(d(t)+"([^]*?)"+d(t),"gm"),n=(e=e.replace(r,"")).split("\r"),i=e.split("\n"),o=1<i.length&&i[0].length<n[0].length;if(1===n.length||o)return"\n";for(var s=0,a=0;a<n.length;a++)"\n"===n[a][0]&&s++;return s>=n.length/2?"\r\n":"\r"}(i,u)),n=!1,e.delimiter)x(e.delimiter)&&(e.delimiter=e.delimiter(i),_.meta.delimiter=e.delimiter);else{var c=function(t,r,n,i,o){var a,u,c,f;o=o||[",","\t","|",";",s.RECORD_SEP,s.UNIT_SEP];for(var l=0;l<o.length;l++){var h=o[l],p=0,d=0,g=0;c=void 0;for(var _=new v({comments:i,delimiter:h,newline:r,preview:10}).parse(t),m=0;m<_.data.length;m++)if(n&&b(_.data[m]))g++;else{var y=_.data[m].length;d+=y,void 0!==c?0<y&&(p+=Math.abs(y-c),c=y):c=y}0<_.data.length&&(d/=_.data.length-g),(void 0===u||p<=u)&&(void 0===f||f<d)&&1.99<d&&(u=p,a=h,f=d)}return{successful:!!(e.delimiter=a),bestDelimiter:a}}(i,e.newline,e.skipEmptyLines,e.comments,e.delimitersToGuess);c.successful?e.delimiter=c.bestDelimiter:(n=!0,e.delimiter=s.DefaultDelimiter),_.meta.delimiter=e.delimiter}var f=y(e);return e.preview&&e.header&&f.preview++,t=i,r=new v(f),_=r.parse(t,o,a),w(),h?{meta:{paused:!0}}:_||{meta:{paused:!1}}},this.paused=function(){return h},this.pause=function(){h=!0,r.abort(),t=x(e.chunk)?"":t.substring(r.getCharIndex())},this.resume=function(){c.streamer._halted?(h=!1,c.streamer.parseChunk(t,!0)):setTimeout(c.resume,3)},this.aborted=function(){return p},this.abort=function(){p=!0,r.abort(),_.meta.aborted=!0,x(e.complete)&&e.complete(_),t=""}}function d(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function v(e){var t,r=(e=e||{}).delimiter,n=e.newline,i=e.comments,o=e.step,a=e.preview,u=e.fastMode,c=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(c=e.escapeChar),("string"!=typeof r||-1<s.BAD_DELIMITERS.indexOf(r))&&(r=","),i===r)throw new Error("Comment character same as delimiter");!0===i?i="#":("string"!=typeof i||-1<s.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==n&&"\r"!==n&&"\r\n"!==n&&(n="\n");var f=0,l=!1;this.parse=function(e,s,h){if("string"!=typeof e)throw new Error("Input must be a string");var p=e.length,v=r.length,g=n.length,_=i.length,m=x(o),y=[],b=[],w=[],O=f=0;if(!e)return z();if(u||!1!==u&&-1===e.indexOf(t)){for(var E=e.split(n),k=0;k<E.length;k++){if(w=E[k],f+=w.length,k!==E.length-1)f+=n.length;else if(h)return z();if(!i||w.substring(0,_)!==i){if(m){if(y=[],I(w.split(r)),P(),l)return z()}else I(w.split(r));if(a&&a<=k)return y=y.slice(0,a),z(!0)}}return z()}for(var j=e.indexOf(r,f),S=e.indexOf(n,f),C=new RegExp(d(c)+d(t),"g"),R=e.indexOf(t,f);;)if(e[f]!==t)if(i&&0===w.length&&e.substring(f,f+_)===i){if(-1===S)return z();f=S+g,S=e.indexOf(n,f),j=e.indexOf(r,f)}else if(-1!==j&&(j<S||-1===S))w.push(e.substring(f,j)),f=j+v,j=e.indexOf(r,f);else{if(-1===S)break;if(w.push(e.substring(f,S)),M(S+g),m&&(P(),l))return z();if(a&&y.length>=a)return z(!0)}else for(R=f,f++;;){if(-1===(R=e.indexOf(t,R+1)))return h||b.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:y.length,index:f}),D();if(R===p-1)return D(e.substring(f,R).replace(C,t));if(t!==c||e[R+1]!==c){if(t===c||0===R||e[R-1]!==c){-1!==j&&j<R+1&&(j=e.indexOf(r,R+1)),-1!==S&&S<R+1&&(S=e.indexOf(n,R+1));var A=L(-1===S?j:Math.min(j,S));if(e[R+1+A]===r){w.push(e.substring(f,R).replace(C,t)),e[f=R+1+A+v]!==t&&(R=e.indexOf(t,f)),j=e.indexOf(r,f),S=e.indexOf(n,f);break}var T=L(S);if(e.substring(R+1+T,R+1+T+g)===n){if(w.push(e.substring(f,R).replace(C,t)),M(R+1+T+g),j=e.indexOf(r,f),R=e.indexOf(t,f),m&&(P(),l))return z();if(a&&y.length>=a)return z(!0);break}b.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:y.length,index:f}),R++}}else R++}return D();function I(e){y.push(e),O=f}function L(t){var r=0;if(-1!==t){var n=e.substring(R+1,t);n&&""===n.trim()&&(r=n.length)}return r}function D(t){return h||(void 0===t&&(t=e.substring(f)),w.push(t),f=p,I(w),m&&P()),z()}function M(t){f=t,I(w),w=[],S=e.indexOf(n,f)}function z(e){return{data:y,errors:b,meta:{delimiter:r,linebreak:n,aborted:l,truncated:!!e,cursor:O+(s||0)}}}function P(){o(z()),y=[],b=[]}},this.abort=function(){l=!0},this.getCharIndex=function(){return f}}function g(e){var t=e.data,r=i[t.workerId],n=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var o={abort:function(){n=!0,_(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:m,resume:m};if(x(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},o),!n);s++);delete t.results}else x(r.userChunk)&&(r.userChunk(t.results,o,t.file),delete t.results)}t.finished&&!n&&_(t.workerId,t.results)}function _(e,t){var r=i[e];x(r.userComplete)&&r.userComplete(t),r.terminate(),delete i[e]}function m(){throw new Error("Not implemented.")}function y(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=y(e[r]);return t}function b(e,t){return function(){e.apply(t,arguments)}}function x(e){return"function"==typeof e}return n&&(t.onmessage=function(e){var r=e.data;if(void 0===s.WORKER_ID&&r&&(s.WORKER_ID=r.workerId),"string"==typeof r.input)t.postMessage({workerId:s.WORKER_ID,results:s.parse(r.input,r.config),finished:!0});else if(t.File&&r.input instanceof File||r.input instanceof Object){var n=s.parse(r.input,r.config);n&&t.postMessage({workerId:s.WORKER_ID,results:n,finished:!0})}}),(c.prototype=Object.create(u.prototype)).constructor=c,(f.prototype=Object.create(u.prototype)).constructor=f,(l.prototype=Object.create(l.prototype)).constructor=l,(h.prototype=Object.create(u.prototype)).constructor=h,s})?r.apply(t,[]):r)||(e.exports=n)}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=r(1066),t=r.n(e);const n=/,(?=(?:(?:[^"]*"){2})*[^"]*$)/;let i=[];function o(e){const t=e.split(n);return t.splice(1,0,""),i.reduce((function(e,r,n){return function(e,t,r){switch("string"==typeof r&&(r=r.replace(/"([^"]+(?="))"/g,"$1")),t){case"date":r=r.replace(/(\d{4})(\d{2})(\d{2})/,"$3-$2-$1");break;case"description":r.startsWith("POS",0)&&(e.memo=`"${r.substr(0,r.indexOf(") ")+1)}"`,r=r.substr(r.indexOf(") ")+2)),r=`"${r}"`;break;case"memo":r||(r='""')}e[t]=r}(e,r,t[n]),e}),{})}const s=function(e){const t=document.getElementById("filePreview"),r=new FileReader;r.onload=function(e){const r=function(e){return i=e.slice(0,e.indexOf("\n")).toLowerCase().split(n),i.splice(1,0,"memo"),e.slice(e.indexOf("\n")+1).split("\n").filter((function(e){return e})).map(o)}(e.target.result);var s;console.log(r),t.innerHTML=function(e){const t=Object.keys(e[0]),r=document.createElement("table"),n=r.createTHead();for(let e=0;e<t.length;e++){const r=document.createElement("th"),i=document.createTextNode(t[e]);r.setAttribute("data-header",t[e]),r.appendChild(i),n.appendChild(r)}const i=document.createElement("tbody");for(let r=0;r<e.length;r++){const n=document.createElement("tr"),o=Object.values(e[r]);for(let e=0;e<o.length;e++){const r=document.createElement("td"),i=document.createTextNode(o[e]);r.appendChild(i),r.setAttribute("data-header",t[e]),n.appendChild(r)}i.appendChild(n)}return r.appendChild(i),r.outerHTML}(r),function(e){const t=document.getElementById("downloadLinkContainer"),r=`${document.getElementById("csvUpload").files[0].name.slice(0,-4)}-export.csv`,n=new Blob([e],{type:"text/csv;charset=utf-8;"});if(navigator.msSaveBlob)navigator.msSaveBlob(n,r);else{const e=document.createElement("a");if(void 0!==e.download){const i=URL.createObjectURL(n);e.setAttribute("href",i),e.setAttribute("download",r),e.classList.add("button"),e.textContent="Download CSV",t.innerHTML=e.outerHTML}}}((s=r,function(e){const t=JSON.parse(e);let r="",n=[];for(let e=0;e<t.length;e++){let i="";for(let r in t[e])0===e&&n.push(r),""!==i&&(i+=","),i+=t[e][r];r+=`${i}\r\n`}return r=`${n.join()}\r\n${r}`,r}(JSON.stringify(s))))},r.readAsText(e)},a={headers:[{name:"Date",inputName:"Date"},{name:"Description",inputName:"Description"},{name:"Amount",inputName:"Amount"},{name:"Balance",inputName:"Balance"}]},u=document.getElementById("csvUpload"),c=document.getElementById("filePreview"),f=document.getElementById("errorMessages");document.getElementById("fileForm").addEventListener("submit",(function(e){if(e.preventDefault(),0===u.files.length)return;const r=u.files[0];document.getElementById("filePreview").innerHTML="",document.getElementById("errorMessages").innerHTML="",document.getElementById("downloadLinkContainer").innerHTML="",t()(r,a).then((e=>{e.inValidMessages.forEach((e=>{f.innerHTML=e})),0===e.inValidMessages.length&&r?s(r):c.innerText="Please choose a valid file"}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,